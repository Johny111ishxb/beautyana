<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Color Extractor</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/firebase/10.8.0/firebase-app-compat.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/firebase/10.8.0/firebase-storage-compat.min.js"></script>
    <style>
        /* Previous styles remain the same */
        :root[data-theme="light"] {
            --bg-color: #f5f5f5;
            --card-bg: #ffffff;
            --text-color: #333333;
            --border-color: #e0e0e0;
            --accent-color: #3FB8AF;
            --secondary-accent: #FF3D7F;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --hover-bg: #f8f8f8;
            --toast-bg: #333;
            --toast-color: #fff;
        }

        :root[data-theme="dark"] {
            --bg-color: #111827;
            --card-bg: #1f2937;
            --text-color: #e5e7eb;
            --border-color: #374151;
            --accent-color: #4fd1c5;
            --secondary-accent: #f87171;
            --shadow-color: rgba(0, 0, 0, 0.3);
            --hover-bg: #374151;
            --toast-bg: #e5e7eb;
            --toast-color: #111827;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            transition: background-color 0.3s, color 0.3s;
        }

        body {
            background-color: var(--bg-color);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            padding: 20px;
            color: var(--text-color);
        }

        .header-buttons {
            position: fixed;
            top: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
        }

        .theme-toggle, .about-btn {
            background: var(--card-bg);
            border: 2px solid var(--border-color);
            padding: 10px 20px;
            border-radius: 50px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 0.9rem;
            box-shadow: 0 4px 6px var(--shadow-color);
            color: var(--text-color);
            transition: all 0.3s ease;
        }

        .theme-toggle:hover, .about-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 8px var(--shadow-color);
        }

        /* Rest of the previous styles remain the same */
        .container {
            background: var(--card-bg);
            padding: 2.5rem;
            border-radius: 24px;
            box-shadow: 0 10px 30px var(--shadow-color);
            width: 100%;
            max-width: 800px;
            margin: 60px auto 20px auto;
        }

        h1 {
            text-align: center;
            color: var(--text-color);
            margin-bottom: 2rem;
            font-size: 2.5rem;
            font-weight: 700;
        }

        .upload-area {
            border: 3px dashed var(--border-color);
            border-radius: 20px;
            padding: 3rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 2rem;
            background: var(--card-bg);
        }

        .upload-area:hover {
            border-color: var(--accent-color);
            background: var(--hover-bg);
            transform: translateY(-2px);
        }

        .upload-icon {
            font-size: 3.5rem;
            color: var(--accent-color);
            margin-bottom: 1rem;
        }

        .upload-text {
            color: var(--text-color);
            margin-bottom: 1rem;
            font-size: 1.1rem;
        }

        #imagePreview {
            max-width: 100%;
            max-height: 300px;
            margin: 1.5rem auto;
            display: none;
            border-radius: 16px;
            box-shadow: 0 5px 15px var(--shadow-color);
        }

        .colors-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .color-card {
            position: relative;
            height: 120px;
            border-radius: 16px;
            cursor: pointer;
            overflow: hidden;
            transition: transform 0.3s ease;
            box-shadow: 0 4px 6px var(--shadow-color);
        }

        .color-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px var(--shadow-color);
        }

        .color-info {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 0.8rem;
            text-align: center;
            font-size: 1rem;
            opacity: 0;
            transition: opacity 0.3s ease;
            backdrop-filter: blur(4px);
        }

        .color-card:hover .color-info {
            opacity: 1;
        }

        .loader {
            display: none;
            gap: 10px;
            justify-content: center;
            margin: 2rem auto;
        }

        .toast {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--toast-bg);
            color: var(--toast-color);
            padding: 1rem 2rem;
            border-radius: 50px;
            display: none;
            animation: fadeIn 0.3s ease;
            font-weight: 500;
            box-shadow: 0 4px 6px var(--shadow-color);
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translate(-50%, 20px); }
            to { opacity: 1; transform: translate(-50%, 0); }
        }
    </style>
</head>
<body>
    <div class="header-buttons">
        <button class="about-btn" id="aboutBtn">
            ‚ÑπÔ∏è About
        </button>
        <button class="theme-toggle" id="themeToggle">
            üåô Toggle Theme
        </button>
    </div>

    <div class="container">
        <h1>Color Extractor</h1>
        
        <div class="upload-area" id="dropZone">
            <div class="upload-icon">üé®</div>
            <p class="upload-text">Drop your image here or click to browse</p>
            <p style="color: var(--text-color); opacity: 0.7">Supports JPG, PNG, SVG</p>
            <input type="file" id="fileInput" hidden accept="image/*">
        </div>

        <div class="loader" id="loader"></div>
        <img id="imagePreview" alt="Preview">
        <div class="colors-grid" id="colorsGrid"></div>
    </div>

    <div class="toast" id="toast">Color copied to clipboard! üé®</div>

    <script>
        // Initialize Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyBk24eVfBQoPQ8Adiw9mA2sS_tpzwJ-ksk",
            authDomain: "imagetotext-4c3e3.firebaseapp.com",
            projectId: "imagetotext-4c3e3",
            storageBucket: "imagetotext-4c3e3.appspot.com",
            messagingSenderId: "643977043225",
            appId: "1:643977043225:web:9d648f58d7098a0c78f988",
            measurementId: "G-XRQFS9KGR0"
        };

        firebase.initializeApp(firebaseConfig);
        const storage = firebase.storage();

        const themeToggle = document.getElementById('themeToggle');
        const aboutBtn = document.getElementById('aboutBtn');
        const html = document.documentElement;
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const imagePreview = document.getElementById('imagePreview');
        const colorsGrid = document.getElementById('colorsGrid');
        const loader = document.getElementById('loader');
        const toast = document.getElementById('toast');

        themeToggle.addEventListener('click', () => {
            const currentTheme = html.getAttribute('data-theme');
            const newTheme = currentTheme === 'light' ? 'dark' : 'light';
            html.setAttribute('data-theme', newTheme);
            themeToggle.innerHTML = newTheme === 'light' ? 'üåô Toggle Theme' : '‚òÄÔ∏è Toggle Theme';
        });

        aboutBtn.addEventListener('click', () => {
            window.location.href = 'https://your-about-page-url.com';
        });

        dropZone.addEventListener('click', () => fileInput.click());
        
        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.style.borderColor = 'var(--accent-color)';
            dropZone.style.transform = 'scale(1.02)';
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.style.borderColor = 'var(--border-color)';
            dropZone.style.transform = 'scale(1)';
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.style.borderColor = 'var(--border-color)';
            dropZone.style.transform = 'scale(1)';
            const file = e.dataTransfer.files[0];
            if (file.type.startsWith('image/')) {
                processImage(file);
            }
        });

        fileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                processImage(file);
            }
        });

        async function processImage(file) {
            const reader = new FileReader();
            
            reader.onload = async (e) => {
                loader.style.display = 'inline-flex';
                imagePreview.style.display = 'none';
                colorsGrid.innerHTML = '';
                
                try {
                    // Upload to Firebase Storage
                    const storageRef = storage.ref();
                    const imageRef = storageRef.child(`images/${Date.now()}_${file.name}`);
                    await imageRef.put(file);
                    const imageUrl = await imageRef.getDownloadURL();
                    
                    const img = new Image();
                    img.onload = () => {
                        imagePreview.src = e.target.result;
                        imagePreview.style.display = 'block';
                        extractColors(img);
                        loader.style.display = 'none';
                    };
                    img.src = e.target.result;
                } catch (error) {
                    console.error('Error uploading image:', error);
                    loader.style.display = 'none';
                }
            };
            reader.readAsDataURL(file);
        }

        function extractColors(img) {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);
            
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
            const colorMap = new Map();

            for (let i = 0; i < imageData.length; i += 40) {
                const r = imageData[i];
                const g = imageData[i + 1];
                const b = imageData[i + 2];
                const hex = rgbToHex(r, g, b);
                colorMap.set(hex, (colorMap.get(hex) || 0) + 1);
            }

            const colors = Array.from(colorMap.entries())
                .sort((a, b) => b[1] - a[1])
                .slice(0, 8)
                .map(([color]) => color);

            displayColors(colors);
        }

        function rgbToHex(r, g, b) {
            return '#' + [r, g, b].map(x => {
                const hex = x.toString(16);
                return hex.length === 1 ? '0' + hex : hex;
            }).join('');
        }

        function displayColors(colors) {
            colorsGrid.innerHTML = '';
            colors.forEach(color => {
                const colorCard = document.createElement('div');
                colorCard.className = 'color-card';
                colorCard.style.backgroundColor = color;
                colorCard.innerHTML = `<div class="color-info">${color}</div>`;
                
                colorCard.addEventListener('click', () => {
                    navigator.clipboard.writeText(color);
                    showToast();
                });
                
                colorsGrid.appendChild(colorCard);
            });
        }

        function showToast() {
            toast.style.display = 'block';
            setTimeout(() => {
                toast.style.display = 'none';
            }, 2000);
        }
    </script>
</body>
</html>
